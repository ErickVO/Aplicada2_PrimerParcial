@page "/Articulos"

@using Models
@using BLL

@inject IToastService toast

<EditForm Model="Articulo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator/>

    <div class="card">
        <div class="card-header">
            <h3>Registro Articulos</h3>
        </div>

        <div class="card-body">
            <form>

                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>Articulo Id:</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="Articulo.ArticuloId" class="form-control col-4" />
                                <ValidationMessage For="(() => Articulo.ArticuloId)"></ValidationMessage>
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label>Descripcion:</label>
                    <InputTextArea @bind-Value="Articulo.Descripcion" class="form-control"/>
                    <ValidationMessage For="(() => Articulo.Descripcion)"></ValidationMessage>
                </div>

                <div class="form-group">
                    <label>Existencia:</label>
                    <InputNumber @bind-Value="Articulo.Existencia" class="form-control"/>
                    <ValidationMessage For="(() => Articulo.Existencia)"></ValidationMessage>
                </div>

                <div class="form-group">
                    <label>Costo:</label>
                    <InputNumber @bind-Value="Articulo.Costo" @onfocusout="CalculoValorInventario" class="form-control"/>
                    <ValidationMessage For="(() => Articulo.Costo)"></ValidationMessage>
                </div>

                <div class="form-group">
                    <label>Valor Inventario:</label>
                    <InputNumber @bind-Value="Articulo.ValorInventario" class="form-control" readOnly="true"/>
                    <ValidationMessage For="(() => Articulo.ValorInventario)"></ValidationMessage>
                </div>

            </form>

        </div>

        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                <button type="submit" class="btn btn-lg btn-success">Guardar</button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>
        </div>

    </div>


</EditForm>


@code {


    Articulos Articulo = new Articulos();
    
 

    protected override void OnInitialized()
    {
        Nuevo();
    }

    private void Nuevo()
    {
        Articulo = new Articulos();
    }

    private void CalculoValorInventario()
    {
        decimal Resultado = (Articulo.Existencia * Articulo.Costo);

        Articulo.ValorInventario = Resultado;
    }

    private void Guardar()
    {
        bool guardo;

        guardo = ArticulosBLL.Guardar(Articulo);

        if (guardo)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
        }
        else
            toast.ShowError("No fue posible guardar");
    }

    private void Eliminar()
    {
        bool elimino;

        elimino = ArticulosBLL.Eliminar(Articulo.ArticuloId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }

    private void Buscar()
    {
        if (Articulo.ArticuloId > 0)
        {
            var encontrado = ArticulosBLL.Buscar(Articulo.ArticuloId);

            if (encontrado != null)
                this.Articulo = encontrado;
            else
                toast.ShowWarning("No encontrado");
        }
    }
}
